name: Build and Deploy Catalog

on:
  push:
    branches:
      - main
    paths-ignore:
      - "LICENSE"
      - "**/.gitignore"
      - "**.md"
      - "**.adoc"
      - "*.txt"
      - ".github/workflows/build-pr.yaml"
      - ".github/workflows/build-tag.yaml"
      - ".github/workflows/build-it.yaml"
  workflow_dispatch:

env:
  LANG: en_US.UTF-8
  MAVEN_OPTS: -Xmx3000m
  MAVEN_ARGS: -V -ntp -Dhttp.keepAlive=false -e
  CONNECTORS_DIR: etc/kubernetes/manifests/base

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set versions
        run: |
          export C_VERSION="${GITHUB_REF_NAME#v}" 
          export C_REVISION="${GITHUB_SHA}" 
          
          echo "CONNECTORS_VERSION=${C_VERSION}" >> $GITHUB_ENV
          echo "CONNECTORS_REVISION=${C_REVISION}" >> $GITHUB_ENV
          echo "CONNECTORS_RELEASE=${C_VERSION}.${C_REVISION}" >> $GITHUB_ENV

      - name: Build Project
        run: |          
          ./mvnw ${MAVEN_ARGS} clean install -U \
            -Pcontainer-build \
            -Pcontainer-test \
            -Dquarkus.container-image.additional-tags=${CONNECTORS_RELEASE} \
            -Dcos.connector.container.tag==${CONNECTORS_RELEASE} \
            -Dlog.enabled=true

      - name: Check for uncommitted changes
        id: check-changes
        uses: mskri/check-uncommitted-changes-action@v1.0.1

      - name: Evaluate if there are changes
        if: steps.check-changes.outputs.outcome == failure()
        run: echo "There are uncommitted changes"

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_MCI_USR }}
          password: ${{ secrets.QUAY_MCI_PWD }}

      - name: Build Catalog Image
        run: |
          docker build -t "quay.io/rhoas/cos-fleet-catalog-camel:${CONNECTORS_RELEASE}" -f etc/Dockerfile.catalog .

      - name: Push Container Images
        run: |
          IMAGES=$(docker image ls --format "{{.Repository}}:{{.Tag}}" | grep quay.io/rhoas/cos-)
          for IMAGE in ${IMAGES}; do          
              docker push $IMAGE
          done

  update-manifest:
    needs:
      - build
    uses: ./.github/workflows/update-manifest.yaml
    with:
      overlay: "dev"
    secrets:
      token: ${{ secrets.GH_TOKEN }}

  deploy-catalog:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Install OpenShift CLI tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "mirror"
          skip_cache: "true"
          oc: "latest"
      - name: Log in and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.K8S_CLUSTER_DEV }}
          openshift_token: ${{ secrets.K8S_CLUSTER_DEV_TOKEN }}
          insecure_skip_tls_verify: false
          namespace: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
      - name: Deploy Catalog
        run: |
          kubectl replace -k "${CONNECTORS_DIR}" -n ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}

  restart-fleet-manager:
    runs-on: ubuntu-latest
    needs: deploy-catalog
    steps:
      - name: Install OpenShift CLI tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "mirror"
          skip_cache: "true"
          oc: "latest"
      - name: Log in and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.K8S_CLUSTER_DEV }}
          openshift_token: ${{ secrets.K8S_CLUSTER_DEV_TOKEN }}
          insecure_skip_tls_verify: false
          namespace: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
      - name: Restart FleetManager
        run: |
          oc rollout restart deployment/cos-fleet-manager --namespace ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
