name: Deploy Catalog

on:
  push:
    branches:
      - main
    paths:
      - 'etc/connectors/**/*.json'
      - '.github/workflows/deploy.yaml'
  workflow_dispatch:

env:
  LANG: en_US.UTF-8

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    container: openshift/origin-cli:latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Build Project
        run: |
          ./mvnw ${MAVEN_ARGS} clean install
      - name: Check for uncommitted changes
        id: check-changes
        uses: mskri/check-uncommitted-changes-action@v1.0.1
      - name: Evaluate if there are changes
        if: steps.check-changes.outputs.outcome == failure()
        run: echo "There are uncommitted changes"
      - name: Build Images
        env:
          IMAGE_REPO_USERNAME: ${{secrets.QUAY_MCI_USR}}
          IMAGE_REPO_PASSWORD: ${{secrets.QUAY_MCI_PWD}}
        run: |
          ./mvnw ${MAVEN_ARGS} clean install \
            -Dquarkus.container-image.username="${IMAGE_REPO_USERNAME}" \
            -Dquarkus.container-image.password="${IMAGE_REPO_PASSWORD}" \
            -Dquarkus.container-image.registry=quay.io \
            -Dquarkus.container-image.group="${IMAGE_REPO_USERNAME}" \
            -Pcontainer-push
      - name: Install OpenShift CLI tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "mirror"
          skip_cache: "true"
          oc: "latest"
      - name: Verify OpenShift CLI tools
        run: |
          oc version
      - name: Log in and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.K8S_CLUSTER_DEV }}
          openshift_username: ${{ secrets.K8S_CLUSTER_DEV_USER }}
          openshift_password: ${{ secrets.K8S_CLUSTER_DEV_PASSWORD }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.K8S_CLUSTER_DEV_NAMESPACE }}
      - name: Deploy Catalog
        run: |
          CONNECTORS_DIR=etc/connectors
          CONNECTORS_NS="${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}"

          for D in "${CONNECTORS_DIR}"/*; do
            CM_NAME=$(basename "${D}")

            echo "Creating configmap: ${CM_NAME} in namespace ${CONNECTORS_NS}"

            kubectl create configmap "${CM_NAME}" \
              --namespace ${CONNECTORS_NS} \
              --from-file="${CONNECTORS_DIR}/${CM_NAME}/" \
              --dry-run \
              -o yaml | kubectl replace -f -
          done
      - name: Restart FleetManager
        run: |
          oc rollout restart deployment/kas-fleet-manager --namespace ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
