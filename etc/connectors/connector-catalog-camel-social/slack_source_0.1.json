{
  "connector_type" : {
    "json_schema" : {
      "type" : "object",
      "properties" : {
        "connector" : {
          "type" : "object",
          "title" : "Slack Source",
          "required" : [ "channel", "token" ],
          "properties" : {
            "channel" : {
              "title" : "Channel",
              "description" : "The Slack channel to receive messages from",
              "type" : "string",
              "example" : "#myroom"
            },
            "token" : {
              "title" : "Token",
              "oneOf" : [ {
                "title" : "Token",
                "description" : "The token to access Slack. A Slack app is needed. This app needs to have channels:history and channels:read permissions. The Bot User OAuth Access Token is the kind of token needed.",
                "type" : "string",
                "format" : "password"
              }, {
                "description" : "An opaque reference to the token",
                "type" : "object",
                "properties" : { }
              } ]
            }
          }
        },
        "kafka" : {
          "type" : "object",
          "title" : "Managed Kafka Sink",
          "required" : [ "topic" ],
          "properties" : {
            "topic" : {
              "title" : "Topic names",
              "description" : "Comma separated list of Kafka topic names",
              "type" : "string"
            }
          }
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "insert-field" ],
              "properties" : {
                "insert-field" : {
                  "title" : "Insert Field Action",
                  "description" : "Adds a custom field with a constant value to the message in transit.\n\nThis action works with Json Object. So it will expect a Json Array or a Json Object.\n\nIf for example you have an array like '{ \"foo\":\"John\", \"bar\":30 }' and your action has been configured with field as 'element' and value as 'hello', you'll get '{ \"foo\":\"John\", \"bar\":30, \"element\":\"hello\" }'\n\nNo headers mapping supported, only constant values.",
                  "required" : [ "field", "value" ],
                  "properties" : {
                    "field" : {
                      "title" : "Field",
                      "description" : "The name of the field to be added",
                      "type" : "string"
                    },
                    "value" : {
                      "title" : "Value",
                      "description" : "The value of the field",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "extract-field" ],
              "properties" : {
                "extract-field" : {
                  "title" : "Extract Field Action",
                  "description" : "Extract a field from the body",
                  "required" : [ "field" ],
                  "properties" : {
                    "field" : {
                      "title" : "Field",
                      "description" : "The name of the field to be added",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "has-header-filter" ],
              "properties" : {
                "has-header-filter" : {
                  "title" : "Has Header Filter Action",
                  "description" : "Filter based on the presence of one header",
                  "required" : [ "name" ],
                  "properties" : {
                    "name" : {
                      "title" : "Header Name",
                      "description" : "The header name to evaluate",
                      "type" : "string",
                      "example" : "headerName"
                    }
                  },
                  "type" : "object"
                }
              }
            } ]
          }
        }
      }
    },
    "id" : "slack_source_0.1",
    "kind" : "ConnectorType",
    "icon_href" : "TODO",
    "name" : "Slack Source",
    "description" : "Slack Source",
    "version" : "0.1",
    "labels" : [ "source" ],
    "channels" : [ "stable" ]
  },
  "channels" : {
    "stable" : {
      "shard_metadata" : {
        "connector_revision" : "3",
        "connector_type" : "source",
        "connector_image" : "quay.io/lburgazzoli/mci:0.1.3-slack-source-0.1",
        "operators" : [ {
          "type" : "camel-connector-operator",
          "version" : "[1.0.0,2.0.0)"
        } ],
        "kamelets" : {
          "connector" : "slack-source",
          "kafka" : "managed-kafka-sink",
          "insert-field" : "insert-field-action",
          "extract-field" : "extract-field-action",
          "has-header-filter" : "has-header-filter-action"
        }
      }
    }
  }
}